/*
Extract Subclass...
Source: Element -> Target: A
*/

// EPackage copy Rule
rule PackageCopyRule 
	transform s : source!EPackage
	to t : dest!EPackage {
	
	// copy old package
	t <- s;
	t.name = s.name + "_Evolved";
}

// EEnum copy Rule
rule EnumCopyRule 
	transform s : source!EEnum
	to t : dest!EEnum {
	
	// copy old enumeration
	t <- s;
	t.name = s.name;
	
	// Copy literals
	for (l: source!EEnumLiteral in s.getELiterals()) {
		var l_new = new dest!EEnumLiteral;
		l_new.name = l.name;
		l_new.literal = l.literal;
		l_new.value = l.value;
		t.getELiterals().add(l_new);
	}
}

// Evolution Rule
rule ExtractSubclass 
	transform s : source!EClass
	to t : dest!EClass {
	
	guard : s.getName() == "Element"
	
	// copy old superclass
	t.name = s.name;
	
	// generate subclass
	var subclass = new dest!EClass;
	subclass <- s;
	subclass.name = "Sub";	
	
	// add attributes
	for (a: source!EAttribute in s.getEAttributes()) {
		var a_new = a;	
		a_new.eType = findDestType(a);
		subclass.getEAttributes().add(a_new);
	}
	
	// add references
	for (r: source!EReference in s.getEReferences()) {
		var r_new = r;						
		r_new.eType = findDestType(r);
		subclass.getEReferences().add(r_new);
	}
	
	// add new reference in old superclass
	var subref = new dest!EReference;
	subref.name = "z";
	subref.eType = subclass;
	t.getEReferences().add(subref);	
}

// EClass copy Rule
rule EClassCopyRule 
	transform s : source!EClass
	to t : dest!EClass {
	
	guard : s.getName() <> "Element"
	
	// copy old class	
	t <- s;	
	t.name = s.name;
	
	// copy attributes
	for (a: source!EAttribute in s.getEAttributes()) {
		var a_new = a;	
		a_new.eType = findDestType(a);
		t.getEAttributes().add(a_new);
	}
	
	// copy references
	for (r: source!EReference in s.getEReferences()) {
		var r_new = r;						
		r_new.eType = findDestType(r);
		t.getEReferences().add(r_new);
	}
}


/*
	Helper Methods
*/
operation findDestType(oldtype: Any): dest!EClassifier {	
	// primitives
	if (isPrimitive(oldtype.eType.name)) {
		return oldtype.eType;
	}
	// user-defined
	else {	
		for (c: dest!EClassifier in dest!EClassifier.allInstances()) {
			if (c.name == oldtype.eType.name) return c;
		}		
		return null;
	}	
}

operation isPrimitive(type: String) : Boolean {
	return (type == "EString") or (type == "EInt") or (type == "EBoolean") or (type == "EFloat");
}