[*
	Evolving MetaModel with Multiple Coloring Extraction
*]
[% import "../engine/utility.eol"; %]
import "../engine/utility.eol";
@Generated("a.nonymous")
/*
[%=ruleName%]...
Domain MM Package: [%=sourcePackageName%] -> Target MM Package: [%=destPackageName%]
Domain MM: [%=sourceName%] -> Target MM: [%=destName%]
*/

// Local Variables
pre {
	var createdPkgs = new List;
	
	// **** Pre-evolving actions ****
	
	// create Eclass for coloring
	var coloring = new dest!EClass;
	coloring.name = "[%=className%]";
	
}

// Evolution Rule
rule [%=ruleName%] 
	transform s: source!EClass
	to t: dest!EClass {
	
	guard : s.getName() == "[%=sourceName%]"
	
	// **** Metaclass evolution ****
	
	// copy old class	
	t <- s;	
	t.name = s.name;
	
	// copy attributes
	for (a: source!EAttribute in s.getEAttributes()) {		
		var add_ok = true;
		for (i in Sequence[%=ignoreColors%]) {
			if (a.getName() == i) {
				add_ok = false;
			}
		}
		if (add_ok) {
			var a_new = a;	
			a_new.eType = findDestType(a);
			t.getEAttributes().add(a_new);
		}
	}
	
	// copy references
	for (r: source!EReference in s.getEReferences()) {
		var r_new = r;						
		r_new.eType = findDestType(r);
		t.getEReferences().add(r_new);
	}
	
	// add coloring reference
	var l_new = new dest!EReference;
	l_new.name = "[%=colorrefName%]";	
	l_new.eType = coloring;
	l_new.containment = true;
	l_new.lowerBound = (Sequence[%=ignoreColors%]).size();
	l_new.upperBound = (Sequence[%=ignoreColors%]).size();
	t.getEReferences().add(l_new);
	
	// append in package
	findDestPackage("[%=destPackageName%]").getEClassifiers().add(t);
}

// EClass copy Rule
rule EClassCopyRule 
	transform s : source!EClass
	to t : dest!EClass {
	
	guard : s.getName() <> "[%=sourceName%]"
	
	// copy old class	
	t <- s;	
	t.name = s.name;
	
	// copy attributes
	for (a: source!EAttribute in s.getEAttributes()) {
		var a_new = a;	
		a_new.eType = findDestType(a);
		t.getEAttributes().add(a_new);
	}
	
	// copy references
	for (r: source!EReference in s.getEReferences()) {
		var r_new = r;						
		r_new.eType = findDestType(r);
		t.getEReferences().add(r_new);
	}
	
	// append in package
	findDestPackage("[%=destPackageName%]").getEClassifiers().add(t);
}

// Final Operations
post {
	// **** Post-evolving actions ****
	
	// add color value attribute
	var a_new = new dest!EAttribute;
	a_new.name = "[%=colorattrValue%]";	
	a_new.eType = System.user.choose("Which is the type for coloring?", dest!EEnum.allInstances());
	coloring.getEAttributes().add(a_new);
	
	// append in package
	findDestPackage("[%=destPackageName%]").getEClassifiers().add(coloring);

	"[%=sourceName%]".println("[%=ruleName%]: ");
}