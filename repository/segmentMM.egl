[*
	Evolving MetaModel with Segment Chaining
*]
[% import "../engine/utility.eol"; %]
import "../engine/utility.eol";
@Generated("a.nonymous")
/*
[%=ruleName%]...
Domain MM Package: [%=sourcePackageName%] -> Target MM Package: [%=destPackageName%]
Domain MM: [%=sourceName%] -> Target MM: [%=destName%]
*/

// Local Variables
pre {
	var createdPkgs = new List;
	
	// **** Pre-evolving actions ****
	
	// create Eclass for Source
	var sourcing = new dest!EClass;
	sourcing.name = "[%=sourceClassName%]";
	
	// add source id
	var a1_new = new dest!EAttribute;
	a1_new.name = "segId";	
	a1_new.eType = eCore!EDataType.all().selectOne(i|i.name == "EString");
	sourcing.getEAttributes().add(a1_new);
	
	// create Eclass for Target
	var targetting = new dest!EClass;
	targetting.name = "[%=targetClassName%]";
	
	// add target id
	var a2_new = new dest!EAttribute;
	a2_new.name = "segId";	
	a2_new.eType = eCore!EDataType.all().selectOne(i|i.name == "EString");
	targetting.getEAttributes().add(a2_new);
	
	// add Target Segment reference
	var tr_new = new dest!EReference;
	tr_new.name = "[%=sourceName.firstToLowerCase()%]";
	tr_new.eType = sourcing;
	targetting.getEReferences().add(tr_new);
	
}

// Evolution Rule
rule [%=ruleName%] 
	transform s: source!EClass
	to t: dest!EClass {
	
	guard : s.getName() == "[%=sourceName%]"
	
	// **** Metaclass evolution ****
	
	// copy old class	
	t <- s;	
	t.name = s.name;
	
	// copy attributes
	for (a: source!EAttribute in s.getEAttributes()) {
		var a_new = a;	
		a_new.eType = findDestType(a);
		t.getEAttributes().add(a_new);
	}
	
	// copy references
	for (r: source!EReference in s.getEReferences()) {
		if (r.getName() <> "[%=refName%]") {
			var r_new = r;						
			r_new.eType = findDestType(r);
			t.getEReferences().add(r_new);
		}		
	}
	
	// add source reference
	var src_new = new dest!EReference;
	src_new.name = "[%=sourcerefName%]";	
	src_new.eType = sourcing;
	src_new.containment = true;
	t.getEReferences().add(src_new);	
	
	// add target reference
	var dst_new = new dest!EReference;
	dst_new.name = "[%=targetrefName%]";	
	dst_new.eType = targetting;
	dst_new.containment = true;
	t.getEReferences().add(dst_new);
		
	
	// append in package
	findDestPackage("[%=destPackageName%]").getEClassifiers().add(t);
}

// EClass copy Rule
rule EClassCopyRule 
	transform s : source!EClass
	to t : dest!EClass {
	
	guard : s.getName() <> "[%=sourceName%]"
	
	// copy old class	
	t <- s;	
	t.name = s.name;
	
	// copy attributes
	for (a: source!EAttribute in s.getEAttributes()) {
		var a_new = a;	
		a_new.eType = findDestType(a);
		t.getEAttributes().add(a_new);
	}
	
	// copy references
	for (r: source!EReference in s.getEReferences()) {
		var r_new = r;						
		r_new.eType = findDestType(r);
		t.getEReferences().add(r_new);
	}
	
	// append in package
	findDestPackage("[%=destPackageName%]").getEClassifiers().add(t);
}

// Final Operations
post {
	// **** Post-evolving actions ****
	
	// append in package
	findDestPackage("[%=destPackageName%]").getEClassifiers().add(sourcing);
	findDestPackage("[%=destPackageName%]").getEClassifiers().add(targetting);

	"[%=sourceName%]".println("[%=ruleName%]: ");
}